#Jack Amos
#Hw 3
#AES
#Python 3.7


#operations
def SubBytes(block):
	
	#s_box, 16x16
	s_box = {0x00:0x63,0x01:0x7c,0x02:0x77,0x03:0x7b,0x04:0xf2,0x05:0x6b,0x06:0x6f,0x07:0xc5,0x08:0x30,0x09:0x01,0x0a:0x67,0x0b:0x2b,0x0c:0xfe,0x0d:0xd7,0x0e:0xab,0x0f:0x76,
		 	0x10:0xca,0x11:0x82,0x12:0xc9,0x13:0x7d,0x14:0xfa,0x15:0x59,0x16:0x47,0x17:0xf0,0x18:0xad,0x19:0xd4,0x1a:0xa2,0x1b:0xaf,0x1c:0x9c,0x1d:0xa4,0x1e:0x72,0x1f:0xc0,
		 	0x20:0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
		 	0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
		 	0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
		 	0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
		 	0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
		 	0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
		 	0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
		 	0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
		 	0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
		 	0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
		 	0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
		 	0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
		 	0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
		 	0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16}

	 	for n in block:
	 		temp = str(n)[:-2]
	 		x_coord = temp[0]
	 		y_coord = temp[1]






	return block


def shift(row,shift_no):

	temp = ""

	row_lst = list(row)

	#performs circular left shift
	while shift_no != 0:
		temp = row_lst[3]
		row_lst[3] = row_lst[0]
		row_lst[0] = row_lst[1]
		row_lst[1] = row_lst[2]
		row_lst[2] = temp
		shift_no-=1
	
	row = row_lst[0] + row_lst[1] + row_lst[2] + row_lst[3]

	return row


def ShiftRows(block):
	
	row1 = block[0:4]
	row2 = block[4:8]
	row3 = block[8:12]
	row4 = block[12:16]
	
	row1 = shift(row1,0)
	row2 = shift(row2,1)
	row3 = shift(row3,2)
	row4 = shift(row4,3)
	
	block = []
	block.append(row1)
	block.append(row2)
	block.append(row3)
	block.append(row4)

	return block



def MixColumns(block):
	
	mix_matrix = [0x2,0x3,0x1,0x1,0x1,0x2,0x3,0x1,0x1,0x1,0x2,0x3,0x3,0x1,0x1,0x2]

	col1 = []
	col2 = []
	col3 = []
	col4 = []
	col_count = 4
	i = 0

	while col_count != 0:
		
		col1.append(block[i])
		col2.append(block[i+1])
		col3.append(block[i+2])
		col4.append(block[i+3])
		i+=4
		col_count-=1

	#mm x col1(4x1 column)
	new_matrix = []
	row_count = 3
	i = 0
	j = 0

	while row_count != 0:
		
		new_matrix.append(col1[i]*(mix_matrix[j]))
		new_matrix.append(col2[i]*(mix_matrix[j+1]))
		new_matrix.append(col3[i]*(mix_matrix[j+2]))
		new_matrix.append(col4[i]*(mix_matrix[j+3]))
		i+=1
		j+=4
		row_count-=1

	return new_matrix




def keyExpansion(key):


	temp_key = list(key)

	num_key = []

	for n in temp_key:
		num_key.append(int(hex(ord(n)),16))

	exp_key_cnt = 52
	i = 4

	while exp_key_cnt != 0:
		num_key.append((num_key[i-1])^(num_key[i-4]))
		i+=1
		exp_key_cnt-=1

	return num_key




def AddRoundKey(block):
	
	key="0f1571c947d9e8591cb7add6af7f6798"

	ki = 0
	kj = 8

	new_key = keyExpansion(key[ki:kj])

	key_lst = list(new_key)

	i = 0

	for n in block:
		block[block.index(n)] = (block[i]^key_lst[i])


	return block





#Get input
plaintext = input("Enter a string: ")

n = 16

#string made to be correct size for processing
if len(plaintext)%16 != 0:
	while n < len(plaintext):
		n+=16

	diff = n - len(plaintext)
	while diff != 0:
		plaintext+="0"
		diff-=1


#divide plaintext into blocks
blocks = []
b_start = 0
b_end = 16
temp = []
ordToAdd = []
ciphertext = ""

while b_start < len(plaintext)-1:
	temp = list(plaintext[b_start:b_end])

	for n in temp:
		ordToAdd.append(int(hex(ord(n)),16))

	blocks.append(ordToAdd)
	b_start+=16
	b_end+=16

print(blocks)

#encryption
rounds = 0

for n in blocks:
	while rounds < 11:
		if rounds == 0:
			arkr = AddRoundKey(n)
		elif rounds == 10:
			sbr = SubBytes(n)
			srr = ShiftRows(sbr)
			arkr = AddRoundKey(srr)
		else:
			sbr = SubBytes(n)
			srr = ShiftRows(sbr)
			mcr = MixColumns(srr)
			arkr = AddRoundKey(mcr)
		rounds+=1
	rounds = 0
	ciphertext+=arkr

print(ciphertext)





