#Jack Amos
#Hw 3
#AES
#Python 3.7


#operations
def SubBytes(block):
	
	#s_box, 16x16
	s_box = {0x00:0x63,0x01:0x7c,0x02:0x77,0x03:0x7b,0x04:0xf2,0x05:0x6b,0x06:0x6f,0x07:0xc5,0x08:0x30,0x09:0x01,0x0a:0x67,0x0b:0x2b,0x0c:0xfe,0x0d:0xd7,0x0e:0xab,0x0f:0x76,
		 	0x10:0xca,0x11:0x82,0x12:0xc9,0x13:0x7d,0x14:0xfa,0x15:0x59,0x16:0x47,0x17:0xf0,0x18:0xad,0x19:0xd4,0x1a:0xa2,0x1b:0xaf,0x1c:0x9c,0x1d:0xa4,0x1e:0x72,0x1f:0xc0,
		 	0x20:0xb7,0x21:0xfd,0x22:0x93,0x23:0x26,0x24:0x36,0x25:0x3f,0x26:0xf7,0x27:0xcc,0x28:0x34,0x29:0xa5,0x2a:0xe5,0x2b:0xf1,0x2c:0x71,0x2d:0xd8,0x2e:0x31,0x2f:0x15,
		 	0x30:0x04,0x31:0xc7,0x32:0x23,0x33:0xc3,0x34:0x18,0x35:0x96,0x36:0x05,0x37:0x9a,0x38:0x07,0x39:0x12,0x3a:0x80,0x3b:0xe2,0x3c:0xeb,0x3d:0x27,0x3e:0xb2,0x3f:0x75,
		 	0x40:0x09,0x41:0x83,0x42:0x2c,0x43:0x1a,0x44:0x1b,0x45:0x6e,0x46:0x5a,0x47:0xa0,0x48:0x52,0x49:0x3b,0x4a:0xd6,0x4b:0xb3,0x4c:0x29,0x4d:0xe3,0x4e:0x2f,0x4f:0x84,
		 	0x50:0x53,0x51:0xd1,0x52:0x00,0x53:0xed,0x54:0x20,0x55:0xfc,0x56:0xb1,0x57:0x5b,0x58:0x6a,0x59:0xcb,0x5a:0xbe,0x5b:0x39,0x5c:0x4a,0x5d:0x4c,0x5e:0x58,0x5f:0xcf,
		 	0x60:0xd0,0x61:0xef,0x62:0xaa,0x63:0xfb,0x64:0x43,0x65:0x4d,0x66:0x33,0x67:0x85,0x68:0x45,0x69:0xf9,0x6a:0x02,0x6b:0x7f,0x6c:0x50,0x6d:0x3c,0x6e:0x9f,0x6f:0xa8,
		 	0x70:0x51,0x71:0xa3,0x72:0x40,0x73:0x8f,0x74:0x92,0x75:0x9d,0x76:0x38,0x77:0xf5,0x78:0xbc,0x79:0xb6,0x7a:0xda,0x7b:0x21,0x7c:0x10,0x7d:0xff,0x7e:0xf3,0x7f:0xd2,
		 	0x80:0xcd,0x81:0x0c,0x82:0x13,0x83:0xec,0x84:0x5f,0x85:0x97,0x86:0x44,0x87:0x17,0x88:0xc4,0x89:0xa7,0x8a:0x7e,0x8b:0x3d,0x8c:0x64,0x8d:0x5d,0x8e:0x19,0x8f:0x73,
		 	0x90:0x60,0x91:0x81,0x92:0x4f,0x93:0xdc,0x94:0x22,0x95:0x2a,0x96:0x90,0x97:0x88,0x98:0x46,0x99:0xee,0x9a:0xb8,0x9b:0x14,0x9c:0xde,0x9d:0x5e,0x9e:0x0b,0x9f:0xdb,
		 	0xa0:0xe0,0xa1:0x32,0xa2:0x3a,0xa3:0x0a,0xa4:0x49,0xa5:0x06,0xa6:0x24,0xa7:0x5c,0xa8:0xc2,0xa9:0xd3,0xaa:0xac,0xab:0x62,0xac:0x91,0xad:0x95,0xae:0xe4,0xaf:0x79,
		 	0xb0:0xe7,0xb1:0xc8,0xb2:0x37,0xb3:0x6d,0xb4:0x8d,0xb5:0xd5,0xb6:0x4e,0xb7:0xa9,0xb8:0x6c,0xb9:0x56,0xba:0xf4,0xbb:0xea,0xbc:0x65,0xbd:0x7a,0xbe:0xae,0xbf:0x08,
		 	0xc0:0xba,0xc1:0x78,0xc2:0x25,0xc3:0x2e,0xc4:0x1c,0xc5:0xa6,0xc6:0xb4,0xc7:0xc6,0xc8:0xe8,0xc9:0xdd,0xca:0x74,0xcb:0x1f,0xcc:0x4b,0xcd:0xbd,0xce:0x8b,0xcf:0x8a,
		 	0xd0:0x70,0xd1:0x3e,0xd2:0xb5,0xd3:0x66,0xd4:0x48,0xd5:0x03,0xd6:0xf6,0xd7:0x0e,0xd8:0x61,0xd9:0x35,0xda:0x57,0xdb:0xb9,0xdc:0x86,0xdd:0xc1,0xde:0x1d,0xdf:0x9e,
		 	0xe0:0xe1,0xe1:0xf8,0xe2:0x98,0xe3:0x11,0xe4:0x69,0xe5:0xd9,0xe6:0x8e,0xe7:0x94,0xe8:0x9b,0xe9:0x1e,0xea:0x87,0xeb:0xe9,0xec:0xce,0xed:0x55,0xee:0x28,0xef:0xdf,
		 	0xf0:0x8c,0xf1:0xa1,0xf2:0x89,0xf3:0x0d,0xf4:0xbf,0xf5:0xe6,0xf6:0x42,0xf7:0x68,0xf8:0x41,0xf9:0x99,0xfa:0x2d,0xfb:0x0f,0xfc:0xb0,0xfd:0x54,0xfe:0xbb,0xff:0x16}

	for n in s_box:
		for m in block:
			if m == n:
				m = s_box[n]

	return block


def shift(row,shift_no):

	temp = 0

	#performs circular left shift
	while shift_no != 0:
		temp = row[3]
		row[3] = row[0]
		row[0] = row[1]
		row[1] = row[2]
		row[2] = temp
		shift_no-=1

	return row


def ShiftRows(block):
	
	row1 = []
	row2 = []
	row3 = []
	row4 = []

	row_count = 4
	i = 0

	while row_count != 0:

		#print(block)
		row1.append(block[i])
		row2.append(block[i+4])
		row3.append(block[i+8])
		row4.append(block[i+12])
		i+=1
		row_count-=1
		
	
	row1 = shift(row1,0)
	row2 = shift(row2,1) 
	row3 = shift(row3,2)
	row4 = shift(row4,3)
	
	block = []

	for n in row1:
		block.append(n)

	for n in row2:
		block.append(n)

	for n in row3:
		block.append(n)

	for n in row4:
		block.append(n)

	return block



def MixColumns(block):
	
	mix_matrix = [0x2,0x3,0x1,0x1,0x1,0x2,0x3,0x1,0x1,0x1,0x2,0x3,0x3,0x1,0x1,0x2]

	col1 = []
	col2 = []
	col3 = []
	col4 = []
	col_count = 4
	i = 0

	while col_count != 0:

		#print(block)
		col1.append(block[i])
		col2.append(block[i+1])
		col3.append(block[i+2])
		col4.append(block[i+3])
		i+=4
		col_count-=1

	#mm x col1(4x1 column)
	new_matrix = []
	row_count = 3
	i = 0
	j = 0

	while row_count != 0:
		
		new_matrix.append(col1[i]*mix_matrix[j])
		new_matrix.append(col2[i]*mix_matrix[j+1])
		new_matrix.append(col3[i]*mix_matrix[j+2])
		new_matrix.append(col4[i]*mix_matrix[j+3])
		i+=1
		j+=4
		row_count-=1

	return new_matrix


def Rotword(word,shift_no):
	
	temp = 0

	#performs circular left shift
	while shift_no != 0:
		temp = word[3]
		word[3] = word[0]
		word[0] = word[1]
		word[1] = word[2]
		word[2] = temp
		shift_no-=1

	return word



def Subword(word):
		#s_box, 16x16
	s_box = {0x00:0x63,0x01:0x7c,0x02:0x77,0x03:0x7b,0x04:0xf2,0x05:0x6b,0x06:0x6f,0x07:0xc5,0x08:0x30,0x09:0x01,0x0a:0x67,0x0b:0x2b,0x0c:0xfe,0x0d:0xd7,0x0e:0xab,0x0f:0x76,
		 	0x10:0xca,0x11:0x82,0x12:0xc9,0x13:0x7d,0x14:0xfa,0x15:0x59,0x16:0x47,0x17:0xf0,0x18:0xad,0x19:0xd4,0x1a:0xa2,0x1b:0xaf,0x1c:0x9c,0x1d:0xa4,0x1e:0x72,0x1f:0xc0,
		 	0x20:0xb7,0x21:0xfd,0x22:0x93,0x23:0x26,0x24:0x36,0x25:0x3f,0x26:0xf7,0x27:0xcc,0x28:0x34,0x29:0xa5,0x2a:0xe5,0x2b:0xf1,0x2c:0x71,0x2d:0xd8,0x2e:0x31,0x2f:0x15,
		 	0x30:0x04,0x31:0xc7,0x32:0x23,0x33:0xc3,0x34:0x18,0x35:0x96,0x36:0x05,0x37:0x9a,0x38:0x07,0x39:0x12,0x3a:0x80,0x3b:0xe2,0x3c:0xeb,0x3d:0x27,0x3e:0xb2,0x3f:0x75,
		 	0x40:0x09,0x41:0x83,0x42:0x2c,0x43:0x1a,0x44:0x1b,0x45:0x6e,0x46:0x5a,0x47:0xa0,0x48:0x52,0x49:0x3b,0x4a:0xd6,0x4b:0xb3,0x4c:0x29,0x4d:0xe3,0x4e:0x2f,0x4f:0x84,
		 	0x50:0x53,0x51:0xd1,0x52:0x00,0x53:0xed,0x54:0x20,0x55:0xfc,0x56:0xb1,0x57:0x5b,0x58:0x6a,0x59:0xcb,0x5a:0xbe,0x5b:0x39,0x5c:0x4a,0x5d:0x4c,0x5e:0x58,0x5f:0xcf,
		 	0x60:0xd0,0x61:0xef,0x62:0xaa,0x63:0xfb,0x64:0x43,0x65:0x4d,0x66:0x33,0x67:0x85,0x68:0x45,0x69:0xf9,0x6a:0x02,0x6b:0x7f,0x6c:0x50,0x6d:0x3c,0x6e:0x9f,0x6f:0xa8,
		 	0x70:0x51,0x71:0xa3,0x72:0x40,0x73:0x8f,0x74:0x92,0x75:0x9d,0x76:0x38,0x77:0xf5,0x78:0xbc,0x79:0xb6,0x7a:0xda,0x7b:0x21,0x7c:0x10,0x7d:0xff,0x7e:0xf3,0x7f:0xd2,
		 	0x80:0xcd,0x81:0x0c,0x82:0x13,0x83:0xec,0x84:0x5f,0x85:0x97,0x86:0x44,0x87:0x17,0x88:0xc4,0x89:0xa7,0x8a:0x7e,0x8b:0x3d,0x8c:0x64,0x8d:0x5d,0x8e:0x19,0x8f:0x73,
		 	0x90:0x60,0x91:0x81,0x92:0x4f,0x93:0xdc,0x94:0x22,0x95:0x2a,0x96:0x90,0x97:0x88,0x98:0x46,0x99:0xee,0x9a:0xb8,0x9b:0x14,0x9c:0xde,0x9d:0x5e,0x9e:0x0b,0x9f:0xdb,
		 	0xa0:0xe0,0xa1:0x32,0xa2:0x3a,0xa3:0x0a,0xa4:0x49,0xa5:0x06,0xa6:0x24,0xa7:0x5c,0xa8:0xc2,0xa9:0xd3,0xaa:0xac,0xab:0x62,0xac:0x91,0xad:0x95,0xae:0xe4,0xaf:0x79,
		 	0xb0:0xe7,0xb1:0xc8,0xb2:0x37,0xb3:0x6d,0xb4:0x8d,0xb5:0xd5,0xb6:0x4e,0xb7:0xa9,0xb8:0x6c,0xb9:0x56,0xba:0xf4,0xbb:0xea,0xbc:0x65,0xbd:0x7a,0xbe:0xae,0xbf:0x08,
		 	0xc0:0xba,0xc1:0x78,0xc2:0x25,0xc3:0x2e,0xc4:0x1c,0xc5:0xa6,0xc6:0xb4,0xc7:0xc6,0xc8:0xe8,0xc9:0xdd,0xca:0x74,0xcb:0x1f,0xcc:0x4b,0xcd:0xbd,0xce:0x8b,0xcf:0x8a,
		 	0xd0:0x70,0xd1:0x3e,0xd2:0xb5,0xd3:0x66,0xd4:0x48,0xd5:0x03,0xd6:0xf6,0xd7:0x0e,0xd8:0x61,0xd9:0x35,0xda:0x57,0xdb:0xb9,0xdc:0x86,0xdd:0xc1,0xde:0x1d,0xdf:0x9e,
		 	0xe0:0xe1,0xe1:0xf8,0xe2:0x98,0xe3:0x11,0xe4:0x69,0xe5:0xd9,0xe6:0x8e,0xe7:0x94,0xe8:0x9b,0xe9:0x1e,0xea:0x87,0xeb:0xe9,0xec:0xce,0xed:0x55,0xee:0x28,0xef:0xdf,
		 	0xf0:0x8c,0xf1:0xa1,0xf2:0x89,0xf3:0x0d,0xf4:0xbf,0xf5:0xe6,0xf6:0x42,0xf7:0x68,0xf8:0x41,0xf9:0x99,0xfa:0x2d,0xfb:0x0f,0xfc:0xb0,0xfd:0x54,0xfe:0xbb,0xff:0x16}

	for n in s_box:
		for m in word:
			if m == n:
				m = s_box[n]

	return word




def keyExpansion(key):


	exp_key_cnt = 52
	i = 4
	j = 0
	l = 0
	k = 1
	Rword = [0x01, 0x00, 0x00, 0x00]


	while exp_key_cnt != 0:
		if j == 0:
			word = key[i:i+4]
			rot = Rotword(word,1)
			sub = Subword(rot)

			for n in sub:
				n = n^Rword[l]
				l+=1
			
			l = 0
			Rword = Rword * 2
			j = 1
		elif j ==1:

			for n in sub:
				key.append(key[k-1]^n)
				k+=1
			j+=1
			k+=11
		else:
			key.append((key[i-1])^(key[i-4]))
			key.append((key[i])^(key[i-3]))
			key.append((key[i+1])^(key[i-2]))
			key.append((key[i+2])^(key[i-1]))
			j+=1

		if j == 4:
			j = 0

		i+=1
		exp_key_cnt-=1

	print(key)
	return key




def AddRoundKey(block):
	
	key = [0x0f,0x15,0x71,0xc9,0x47,0xd9,0xe8,0x59,0x1c,0xb7,0xad,0xd6,0xaf,0x7f,0x67,0x98] 

	key_lst = keyExpansion(key)

	i = 0


	for n in block:
		block[block.index(n)] = (block[i]^key_lst[i])
		i+=1


	return block





#Get input
plaintext = input("Enter a string: ")

n = 16

#string made to be correct size for processing
if len(plaintext)%16 != 0:
	while n < len(plaintext):
		n+=16

	diff = n - len(plaintext)
	while diff != 0:
		plaintext+="0"
		diff-=1


#divide plaintext into blocks
blocks = []
b_start = 0
b_end = 16
temp = []
ordToAdd = []
ciphertext = ""

while b_start < len(plaintext)-1:
	temp = list(plaintext[b_start:b_end])

	for n in temp:
		ordToAdd.append(int(hex(ord(n)),16))

	blocks.append(ordToAdd)
	b_start+=16
	b_end+=16


#encryption
rounds = 0

for n in blocks:
	while rounds < 11:
		if rounds == 0:
			arkr = AddRoundKey(n)
		elif rounds == 10:
			sbr = SubBytes(n)
			srr = ShiftRows(sbr)
			arkr = AddRoundKey(srr)
		else:
			sbr = SubBytes(n)
			srr = ShiftRows(sbr)
			mcr = MixColumns(srr)
			arkr = AddRoundKey(mcr)
		rounds+=1
	rounds = 0

	#hex back to chars
	for n in arkr:
		n = "0x" + str(n)
		ciphertext+=n



print(ciphertext)





